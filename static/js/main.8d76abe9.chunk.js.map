{"version":3,"sources":["FeedbackOptions/FeedbackOptions.jsx","Statistics/Statistics.jsx","Section/Section.jsx","Notification/Notification.jsx","App.jsx","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","Object","keys","map","option","onClick","name","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFidback","e","currentTarget","prevState","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPA2BeA,MAxBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAIlC,OAHAD,EAAUE,OAAOC,KAAKH,GAIpB,8BACGA,EAAQI,KAAI,SAAAC,GAAM,OACjB,wBAAqBC,QAASL,EAAiBM,KAAMF,EAArD,SACGA,GADUA,SCeNG,MAtBf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,8BACE,+BACE,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,aCMOC,MAdf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,gCACE,6BAAKD,IACJC,MCIQC,MARf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,8BAAMA,KCKA,SAASC,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOX,EAAP,KAAaY,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOV,EAAP,KAAgBY,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOT,EAAP,KAAYY,EAAZ,KAwBMC,EAAoB,WACxB,OAAOf,EAAOC,EAAUC,GAG1B,OACE,gCACE,cAAC,EAAD,CAASI,MAAM,wBAAf,SACE,cAAC,EAAD,CACEf,QAAS,CAAES,OAAMC,UAASC,OAC1BV,gBA/BuB,SAAAwB,GAC7B,OAAQA,EAAEC,cAAcnB,MACtB,IAAK,OACHc,GAAQ,SAAAM,GAAS,OAAIA,EAAY,KACjC,MACF,IAAK,UACHL,GAAW,SAAAK,GAAS,OAAIA,EAAY,KACpC,MACF,IAAK,MACHJ,GAAO,SAAAI,GAAS,OAAIA,EAAY,WA0BlC,cAAC,EAAD,CAASZ,MAAM,aAAf,SACGS,IAAsB,EACrB,cAAC,EAAD,CACEf,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOY,IACPX,mBAzBuB,IAAxBW,IACHI,KAAKC,MAAOpB,EAAOe,IAAuB,KAC1C,IA0BE,cAAC,EAAD,CAAcN,QAAQ,2BCtDhCY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.8d76abe9.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n  options = Object.keys(options);\r\n  // console.log(options);\r\n\r\n  return (\r\n    <div>\r\n      {options.map(option => (\r\n        <button key={option} onClick={onLeaveFeedback} name={option}>\r\n          {option}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.shape({\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n  onLeaveFeedback: PropTypes.func,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\r\n  return (\r\n    <div>\r\n      <ul>\r\n        <li>Good: {good}</li>\r\n        <li>Neutral: {neutral}</li>\r\n        <li>Bad: {bad}</li>\r\n        <li>Total: {total}</li>\r\n        <li>Positive feedback: {positivePercentage}%</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <div>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Notification({ message }) {\r\n  return <div>{message}</div>;\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import './App.css';\r\n\r\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions';\r\nimport Statistics from './Statistics/Statistics';\r\nimport Section from './Section/Section';\r\nimport Notification from './Notification/Notification';\r\n\r\nimport { useState } from 'react';\r\n\r\nexport default function App() {\r\n  const [good, setGood] = useState(0);\r\n  const [neutral, setNeutral] = useState(0);\r\n  const [bad, setBad] = useState(0);\r\n\r\n  const handleChangeStatistics = e => {\r\n    switch (e.currentTarget.name) {\r\n      case 'good':\r\n        setGood(prevState => prevState + 1);\r\n        break;\r\n      case 'neutral':\r\n        setNeutral(prevState => prevState + 1);\r\n        break;\r\n      case 'bad':\r\n        setBad(prevState => prevState + 1);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const countPositiveFeedbackPercentage = () => {\r\n    return countTotalFidback() !== 0\r\n      ? Math.round((good / countTotalFidback()) * 100)\r\n      : 0;\r\n  };\r\n\r\n  const countTotalFidback = () => {\r\n    return good + neutral + bad;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Section title=\"Please leave feedback\">\r\n        <FeedbackOptions\r\n          options={{ good, neutral, bad }} //передаем статйты в виде массива\r\n          onLeaveFeedback={handleChangeStatistics}\r\n        />\r\n      </Section>\r\n\r\n      <Section title=\"Statistics\">\r\n        {countTotalFidback() > 0 ? (\r\n          <Statistics\r\n            good={good}\r\n            neutral={neutral}\r\n            bad={bad}\r\n            total={countTotalFidback()}\r\n            positivePercentage={countPositiveFeedbackPercentage()}\r\n          />\r\n        ) : (\r\n          <Notification message=\"No feedback given\" />\r\n        )}\r\n      </Section>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}